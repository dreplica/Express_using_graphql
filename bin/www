#!/usr/bin/env node

require('dotenv').config()
/**
 * Module dependencies.
 */

var app = require('../dist/app').default;
var debug = require('debug')('expressproject:server');
var http = require('http');
var mongoose = require('mongoose')
const {authenticate} = require('../dist/mongoModel/contact-postgres')

mongoose.connect(process.env.MONGO_URL, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  useCreateIndex:true
}).then(() => console.log('database has connected'))
  .catch(() => console.log('database couldn\'t connect'))

const Mongo_connect = () => console.log(`connected to database on`)
const Mongo_disconnect = () => console.log('disconnected from database')
const Mongo_err_connect = (err) => console.error(err.message)

authenticate();
async function loader() {
  try {
    await mongoose.connection.on('connected', Mongo_connect);
    await mongoose.connection.on('disconnected', Mongo_disconnect);
    await mongoose.connection.on('error', Mongo_err_connect);

  } catch (error) {
    console.log(error.message)
  }
}

loader();
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);
  console.log(port)
  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


module.exports = server